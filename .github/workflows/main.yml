name: Conditional Test Runner

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
  workflow_dispatch:

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    outputs:
      problem: ${{ steps.set-vars.outputs.problem }}
      language: ${{ steps.set-vars.outputs.language }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Problem and Language
        id: problem-language
        run: |
          # Fetch the latest commits from the main branch
          git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main
      
          # Compare the fetched main branch to the HEAD of the PR
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '^src/')
          echo "Changed Files: $CHANGED_FILES"
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No src files changed."
            echo "::set-output name=problem::none"
            echo "::set-output name=language::none"
          else
            PROBLEM=$(echo "$CHANGED_FILES" | grep -o 'src/[^/]*/' | sed 's/src\///' | sed 's/\/.*//')
            LANGUAGE=$(echo "$CHANGED_FILES" | grep -o 'src/[^/]*/[^/]*' | sed 's/src\/[^/]*\///' | sed 's/\/.*//' | uniq)
            echo "Problem: $PROBLEM, Language: $LANGUAGE"
            echo "::set-output name=problem::$PROBLEM"
            echo "::set-output name=language::$LANGUAGE"
          fi
        
        
        

      - name: Set up .NET Core
        if: env.language == 'csharp' && env.problem != 'none'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.100'

      - name: Set up Go
        if: env.language == 'golang' && env.problem != 'none'
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'

      - name: Set up Java
        if: env.language == 'java' && env.problem != 'none'
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Set up Node.js
        if: env.language == 'node' && env.problem != 'none'
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Set up Python
        if: env.language == 'python' && env.problem != 'none'
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Run .NET Tests
        if: env.language == 'csharp' && env.problem != 'none'
        run: dotnet test src/${{ env.problem }}/csharp/

      - name: Run Go Tests
        if: env.language == 'golang' && env.problem != 'none'
        run: go test src/${{ env.problem }}/golang/...

      - name: Run Java Tests
        if: env.language == 'java' && env.problem != 'none'
        run: mvn -f src/${{ env.problem }}/java/pom.xml test

      - name: Run Node.js Tests
        if: env.language == 'node' && env.problem != 'none'
        run: npm install && npm test --prefix src/${{ env.problem }}/node/

      - name: Run Python Tests
        if: env.language == 'python' && env.problem != 'none'
        run: pip install -r src/${{ env.problem }}/python/requirements.txt && pytest src/${{ env.problem }}/python/
